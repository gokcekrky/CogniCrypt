abstract Enum

//enum Security
abstract Security : Enum -> integer
NoSecurity: Security = 0
Broken: Security = 1
Weak: Security = 2
Medium: Security = 3
Strong: Security = 4

//enum Performance
abstract Performance : Enum -> integer
VerySlow: Performance = 1
Slow: Performance = 2
Fast: Performance = 3
VeryFast: Performance = 4

//enum TLS_Version
abstract TLS_Version : Enum  -> integer
SSL2: TLS_Version = 1
SSL3: TLS_Version = 2
TLS1_0: TLS_Version = 3
TLS1_1: TLS_Version = 4
TLS1_2: TLS_Version = 5

//enum Padding
abstract Padding: Enum 
NoPadding : Padding
PKCS5Padding : Padding

//enum Mode
abstract Mode : Enum
ECB : Mode
CBC : Mode
OFB : Mode
GCM : Mode

abstract Algorithm
	name -> string
	description -> string
	security -> Security
	performance -> Performance
	classPerformance -> Performance 

abstract Cipher : Algorithm

abstract SymmetricCipher : Cipher
	keySize -> integer
	mode -> Mode ?
	[classPerformance = Fast]

abstract AsymmetricCipher: Cipher
	[classPerformance = VerySlow]

abstract SymmetricBlockCipher : SymmetricCipher
	padding -> Padding
	[mode != ECB]
	[mode = CBC => padding != NoPadding]

abstract StreamCipher: SymmetricCipher
	[no mode]

abstract DigitalSignatureAlgm : Algorithm
	//keySize -> integer
	[classPerformance = VerySlow]

abstract KeyAgreementAlgorithm : Algorithm
	[classPerformance = Slow]

abstract Digest : Algorithm
	outputSize -> integer
	[classPerformance = VeryFast]

abstract Task
    description -> string

//SymmetricBlockCipherAlgorithms
	
AES128GCM : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 128]
	[performance = VeryFast]
	[security = Medium]
	[mode = GCM]

AES128CBC : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 128]
	[performance = VeryFast]
	[security = Medium]
	[mode = CBC]

AES256GCM : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 256]
	[performance = Fast]
	[security = Strong]
	[mode = GCM]

AES256CBC : SymmetricBlockCipher
	[name = "AES"]
	[description = "Advanced Encryption Standard (AES) cipher"]s
	[keySize = 256]
	[performance = Fast]
	[security = Strong]
	[mode = CBC]


TDES : SymmetricBlockCipher
	[name = "3DES"]
	[description = "Triple Data Encryption Algorithm Encrypt-Decrypt-Encrypt mode"]s
	[keySize = 168]
	[performance = VeryFast]
	[security = Weak]

//SymmetricStreamCiphersAlgorithms

RC4128 : StreamCipher
	[name = "RC4"]
	[description = "RC4 (Rivest Cipher 4)"]s
	[keySize = 128]
	[performance = VeryFast]
	[security = Broken]

RC440 : StreamCipher
	[name = "RC4"]
	[description = "RC4 (Rivest Cipher 4)"]s
	[keySize = 40]
	[performance = VeryFast]
	[security = Broken]

// DigestAlgorithms
SHA256: Digest
	[description = "SHA-256 digest"]
	[name = "SHA-256"]
	[outputSize = 256]
	[security = Strong]
	[performance = Fast]

SHA384: Digest
	[description = "SHA-384 digest"]
	[name = "SHA-384"]
	[outputSize = 384]
	[security = Strong]
	[performance = VerySlow]

SHA1: Digest
	[name = "SHA-1"]
	[description = "SHA-1 digest"]
	[performance = VeryFast]
	[security = Weak]
	[outputSize = 160]		

MD5: Digest
	[name = "MD5"]
	[description = "MD5 digest"]
	[performance = VeryFast]
	[security = Broken]
	[outputSize = 128]	
			

//KeyAgreementAlgorithms
ECDHE : KeyAgreementAlgorithm 
	[name = "ECDHE"]
	[description = "Key exchange algorithm"]
	[security = Strong]
	[performance = VeryFast]	

ECDH : KeyAgreementAlgorithm 
	[name = "ECDH"]
	[description = "Key exchange algorithm"]
	[security = Medium]
	[performance = VeryFast]

DHE : KeyAgreementAlgorithm 
	[name = "DHE"]
	[description = "Key exchange algorithm"]
	[security = Strong]
	[performance = Fast]

DH : KeyAgreementAlgorithm 
	[name = "DH"]
	[description = "Key exchange algorithm"]
	[security = Medium]
	[performance = Fast]

//DigitalSigAlgms
ECDSA : DigitalSignatureAlgm
	[name = "ECDSA"]
	[description = "Digital signature"]
	[security = Strong]
	[performance = VeryFast]

DSS : DigitalSignatureAlgm
	[name = "DSS"]
	[description = "Digital signature"]
	[security = Strong]
	[performance = Fast]

RSA_Sig : DigitalSignatureAlgm
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Strong]
	[performance = Slow]

RSA_Asymm : AsymmetricCipher
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Strong]
	[performance = VerySlow]

RSA_KeyAgr : KeyAgreementAlgorithm
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Medium]
	[performance = Slow]

abstract CipherSuite
	cipher -> SymmetricCipher ?
	tlsProtocol -> TLS_Version
	keyAgreement -> KeyAgreementAlgorithm
	signature -> DigitalSignatureAlgm
	messageAuth -> Digest
	[messageAuth = SHA384 || messageAuth = SHA256 => tlsProtocol >= TLS1_2]
	
	cipherSecurity -> integer
	[cipherSecurity = (if cipher then cipher.security.ref else 0)]
	security -> integer   
	[security = min(
		messageAuth.security, 
		keyAgreement.security, 
		signature.security, 
		cipherSecurity)]
	performance -> integer
	[performance = min(signature.classPerformance, keyAgreement.classPerformance, cipher.classPerformance, messageAuth.classPerformance)]

TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 : CipherSuite
    [cipher = AES256GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDHE]
    [signature = RSA_Sig]
    [messageAuth = SHA384]

TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 : CipherSuite
    [cipher = AES256GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDH]
    [signature = ECDSA]
    [messageAuth = SHA384]

TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 : CipherSuite
    [cipher = AES256GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDH]
    [signature = RSA_Sig]
    [messageAuth = SHA384]

TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 : CipherSuite
    [cipher = AES256GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = DHE]
    [signature = RSA_Sig]
    [messageAuth = SHA384]
	
TLS_RSA_WITH_AES_256_GCM_SHA384 : CipherSuite
    [cipher = AES256GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = RSA_KeyAgr]
    [signature = RSA_Sig]
    [messageAuth = SHA384]

TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 : CipherSuite
	[cipher = AES256GCM]
	[cipher.mode = GCM]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA384] 	

TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA384]

TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[signature = RSA_Sig]
	[keyAgreement = ECDHE]
	[messageAuth = SHA384]

TLS_RSA_WITH_AES_256_CBC_SHA256 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[signature = RSA_Sig]
	[keyAgreement = RSA_KeyAgr]
	[messageAuth = SHA256]

TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDH]
	[signature = ECDSA]
	[messageAuth = SHA384]

TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDH]
	[signature = RSA_Sig]
	[messageAuth = SHA384]

TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = DHE]
	[signature = RSA_Sig]
	[messageAuth = SHA256]

TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = DHE]
	[signature = DSS]
	[messageAuth = SHA256]

TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDHE]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_RSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = RSA_KeyAgr]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDH]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDH_RSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDH]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_DHE_RSA_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = DHE]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_DHE_DSS_WITH_AES_256_CBC_SHA : CipherSuite
	[cipher = AES256CBC]
	[cipher.mode = CBC]
	[keyAgreement = DHE]
	[signature = DSS]
	[messageAuth = SHA1]

TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA256]

TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDHE]
	[signature = RSA_Sig]
	[messageAuth = SHA256]

TLS_RSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = RSA_KeyAgr]
	[signature = RSA_Sig]
	[messageAuth = SHA256]

TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDH]
	[signature = ECDSA]
	[messageAuth = SHA256]

TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = ECDH]
	[signature = RSA_Sig]
	[messageAuth = SHA256]

TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = DHE]
	[signature = RSA_Sig]
	[messageAuth = SHA256]

TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[keyAgreement = DHE]
	[signature = DSS]
	[messageAuth = SHA256]

TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDHE]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_RSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = RSA_KeyAgr]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDH]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDH_RSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = ECDH]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_DHE_RSA_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = DHE]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_DHE_DSS_WITH_AES_128_CBC_SHA : CipherSuite
	[cipher = AES128CBC]
	[cipher.mode = CBC]
	[keyAgreement = DHE]
	[signature = DSS]
	[messageAuth = SHA1]

TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 : CipherSuite
	[cipher = AES128GCM]
	[cipher.mode = GCM]
	[signature = RSA_Sig]
	[messageAuth = SHA256]
	[keyAgreement = DHE]

TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = ECDHE]
    [signature = RSA_Sig]
    [messageAuth = SHA1]

TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = ECDH]
    [signature = ECDSA]
    [messageAuth = SHA1]

TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = ECDH]
    [signature = RSA_Sig]
    [messageAuth = SHA1]

TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDH]
    [signature = ECDSA]
    [messageAuth = SHA256]

TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDH]
    [signature = RSA_Sig]
    [messageAuth = SHA256]

TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = DHE]
    [signature = DSS]
    [messageAuth = SHA256]

TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = ECDHE]
    [signature = ECDSA]
    [messageAuth = SHA1]

TLS_RSA_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = RSA_KeyAgr]
    [signature = RSA_Sig]
    [messageAuth = SHA256]

TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDHE]
    [signature = RSA_Sig]
    [messageAuth = SHA256]

TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 : CipherSuite
    [cipher = AES128GCM]
    [cipher.mode = GCM]
    [tlsProtocol >= TLS1_2]
    [keyAgreement = ECDHE]
    [signature = ECDSA]
    [messageAuth = SHA256]

TLS_ECDH_RSA_WITH_RC4_128_SHA : CipherSuite
	[cipher = RC4128]
	[keyAgreement = ECDH]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

TLS_ECDH_ECDSA_WITH_RC4_128_SHA : CipherSuite
	[cipher = RC4128]
	[keyAgreement = ECDH]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDHE_ECDSA_WITH_RC4_128_SHA : CipherSuite
	[cipher = RC4128]
	[keyAgreement = ECDHE]
	[signature = ECDSA]
	[messageAuth = SHA1]

TLS_ECDHE_RSA_WITH_RC4_128_SHA : CipherSuite
	[cipher = RC4128]
	[keyAgreement = ECDHE]
	[signature = RSA_Sig]
	[messageAuth = SHA1]

SSL_RSA_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = RSA_KeyAgr]
    [signature = RSA_Sig]
    [messageAuth = SHA1]
    [tlsProtocol >= SSL2] //TODO: double check the tls version/protocol

SSL_RSA_WITH_RC4_128_MD5 : CipherSuite
    [cipher = RC4128]
    [keyAgreement = RSA_KeyAgr]
    [signature = RSA_Sig]
    [messageAuth = MD5]
    [tlsProtocol >= SSL2] //TODO: double check the tls version/protocol

SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA : CipherSuite
    [cipher = TDES]
    [cipher.mode = CBC]
    [keyAgreement = DHE]
    [signature = DSS]
    [messageAuth = SHA1]
    [tlsProtocol >= SSL2] //TODO: double check the tls version/protocol

SSL_RSA_WITH_RC4_128_SHA : CipherSuite
	[cipher = RC4128]
	[keyAgreement = RSA_KeyAgr]
	[signature = RSA_Sig]
	[messageAuth = SHA1]
	[tlsProtocol >= SSL2] //TODO: double check the tls version/protocol

SSL_RSA_WITH_NULL_MD5 : CipherSuite
	[no cipher]
	[signature = RSA_Sig]
	[messageAuth = MD5]
	[keyAgreement = RSA_KeyAgr]
	[tlsProtocol >= SSL2] //TODO: double check the tls version/protocol

SecureCommunication : Task  
	[description = "Communicate over a secure channel"]
	ciphersuites -> CipherSuite 7..*
	tlsVersion -> TLS_Version
	[tlsVersion = TLS1_2]
	security -> integer
	[security = min(ciphersuites.security)]
